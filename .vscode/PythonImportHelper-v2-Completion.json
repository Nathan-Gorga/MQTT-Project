[
    {
        "label": "paho.mqtt.client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "paho.mqtt.client",
        "description": "paho.mqtt.client",
        "detail": "paho.mqtt.client",
        "documentation": {}
    },
    {
        "label": "getBrokerAddress",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "getBrokerPort",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "getBrokerAddress",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "getBrokerPort",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "getBrokerAddress",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "getBrokerPort",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "Channel",
        "importPath": "channel.channel",
        "description": "channel.channel",
        "isExtraImport": true,
        "detail": "channel.channel",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "filedialog",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "ChatWindow",
        "importPath": "gui_folder.chat_window",
        "description": "gui_folder.chat_window",
        "isExtraImport": true,
        "detail": "gui_folder.chat_window",
        "documentation": {}
    },
    {
        "label": "ChannelManager",
        "importPath": "channel.channelManager",
        "description": "channel.channelManager",
        "isExtraImport": true,
        "detail": "channel.channelManager",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "user.user",
        "description": "user.user",
        "isExtraImport": true,
        "detail": "user.user",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "LoginWindow",
        "importPath": "gui_folder.login_window",
        "description": "gui_folder.login_window",
        "isExtraImport": true,
        "detail": "gui_folder.login_window",
        "documentation": {}
    },
    {
        "label": "Channel",
        "kind": 6,
        "importPath": "channel.channel",
        "description": "channel.channel",
        "peekOfCode": "class Channel:\n    def __init__(self, name, broker_address=getBrokerAddress(), port=getBrokerPort()):\n        self.name = name\n        self.broker_address = broker_address\n        self.port = port\n        self.client = mqtt.Client()\n        self.client.on_message = self._internal_on_message\n        self.on_message_callback = None\n        self.connected = False  # pour éviter plusieurs loop_start()\n    def connect(self):",
        "detail": "channel.channel",
        "documentation": {}
    },
    {
        "label": "ChannelManager",
        "kind": 6,
        "importPath": "channel.channelManager",
        "description": "channel.channelManager",
        "peekOfCode": "class ChannelManager:\n    def __init__(self, broker_address=getBrokerAddress(), port=getBrokerPort()):\n        self.channels = {}\n        self.broker_address = broker_address\n        self.port = port\n    def create_channel(self, name):\n        if name not in self.channels:\n            channel = Channel(name, self.broker_address, self.port)\n            self.channels[name] = channel\n            return channel",
        "detail": "channel.channelManager",
        "documentation": {}
    },
    {
        "label": "ChatWindow",
        "kind": 6,
        "importPath": "gui_folder.chat_window",
        "description": "gui_folder.chat_window",
        "peekOfCode": "class ChatWindow(tk.Tk):\n    def __init__(self, pseudo, salon, user, manager): \n        super().__init__()\n        self.title(f\"Salon : {salon}\")\n        self.geometry(\"500x400\")\n        self.resizable(True, True)\n        self.pseudo = pseudo\n        self.salon = salon\n        self.user = user\n        self.manager = manager",
        "detail": "gui_folder.chat_window",
        "documentation": {}
    },
    {
        "label": "LoginWindow",
        "kind": 6,
        "importPath": "gui_folder.login_window",
        "description": "gui_folder.login_window",
        "peekOfCode": "class LoginWindow(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Connexion au Chat\")\n        self.geometry(\"300x200\")\n        self.resizable(False, False)\n        self.pseudo = tk.StringVar()\n        self.salon = tk.StringVar(value=\"general\")\n        self.create_widgets()\n    def create_widgets(self):",
        "detail": "gui_folder.login_window",
        "documentation": {}
    },
    {
        "label": "make_dm_channel_name",
        "kind": 2,
        "importPath": "protocols.dm_protocol",
        "description": "protocols.dm_protocol",
        "peekOfCode": "def make_dm_channel_name(user1_id, user2_id):\n    \"\"\"Retourne un nom canonique pour un canal DM entre deux utilisateurs\"\"\"\n    sorted_users = sorted([user1_id, user2_id])\n    return f\"dm_{sorted_users[0]}_{sorted_users[1]}\"\ndef is_dm_invitation(message):\n    \"\"\"Vérifie si le message est une invitation DM valide\"\"\"\n    return message.startswith(\"DM_INVITE::\")\ndef extract_dm_channel_name(message):\n    \"\"\"Extrait le nom du salon DM depuis une invitation\"\"\"\n    if not is_dm_invitation(message):",
        "detail": "protocols.dm_protocol",
        "documentation": {}
    },
    {
        "label": "is_dm_invitation",
        "kind": 2,
        "importPath": "protocols.dm_protocol",
        "description": "protocols.dm_protocol",
        "peekOfCode": "def is_dm_invitation(message):\n    \"\"\"Vérifie si le message est une invitation DM valide\"\"\"\n    return message.startswith(\"DM_INVITE::\")\ndef extract_dm_channel_name(message):\n    \"\"\"Extrait le nom du salon DM depuis une invitation\"\"\"\n    if not is_dm_invitation(message):\n        return None\n    parts = message.split(\"::\", 1)\n    if len(parts) != 2:\n        return None",
        "detail": "protocols.dm_protocol",
        "documentation": {}
    },
    {
        "label": "extract_dm_channel_name",
        "kind": 2,
        "importPath": "protocols.dm_protocol",
        "description": "protocols.dm_protocol",
        "peekOfCode": "def extract_dm_channel_name(message):\n    \"\"\"Extrait le nom du salon DM depuis une invitation\"\"\"\n    if not is_dm_invitation(message):\n        return None\n    parts = message.split(\"::\", 1)\n    if len(parts) != 2:\n        return None\n    return parts[1] if parts[1].startswith(\"dm_\") else None\ndef build_dm_invitation(channel_name):\n    \"\"\"Construit un message d'invitation DM\"\"\"",
        "detail": "protocols.dm_protocol",
        "documentation": {}
    },
    {
        "label": "build_dm_invitation",
        "kind": 2,
        "importPath": "protocols.dm_protocol",
        "description": "protocols.dm_protocol",
        "peekOfCode": "def build_dm_invitation(channel_name):\n    \"\"\"Construit un message d'invitation DM\"\"\"\n    return f\"DM_INVITE::{channel_name}\"\ndef should_ignore_dm(user_id, target_id):\n    \"\"\"Évite les auto-invitations\"\"\"\n    return not target_id or user_id == target_id\n# dm_protocol.py\ndef setup_personal_dm_channel(manager: ChannelManager, user: User, on_message_callback: Callable):\n    \"\"\"Crée le channel personnel et configure la réception d'invitations DM.\"\"\"\n    my_id = user.user_id",
        "detail": "protocols.dm_protocol",
        "documentation": {}
    },
    {
        "label": "should_ignore_dm",
        "kind": 2,
        "importPath": "protocols.dm_protocol",
        "description": "protocols.dm_protocol",
        "peekOfCode": "def should_ignore_dm(user_id, target_id):\n    \"\"\"Évite les auto-invitations\"\"\"\n    return not target_id or user_id == target_id\n# dm_protocol.py\ndef setup_personal_dm_channel(manager: ChannelManager, user: User, on_message_callback: Callable):\n    \"\"\"Crée le channel personnel et configure la réception d'invitations DM.\"\"\"\n    my_id = user.user_id\n    manager.create_channel(my_id)\n    personal_channel = manager.get_channel(my_id)\n    personal_channel.set_on_message_callback(on_message_callback)",
        "detail": "protocols.dm_protocol",
        "documentation": {}
    },
    {
        "label": "setup_personal_dm_channel",
        "kind": 2,
        "importPath": "protocols.dm_protocol",
        "description": "protocols.dm_protocol",
        "peekOfCode": "def setup_personal_dm_channel(manager: ChannelManager, user: User, on_message_callback: Callable):\n    \"\"\"Crée le channel personnel et configure la réception d'invitations DM.\"\"\"\n    my_id = user.user_id\n    manager.create_channel(my_id)\n    personal_channel = manager.get_channel(my_id)\n    personal_channel.set_on_message_callback(on_message_callback)\n    personal_channel.subscribe()\ndef handle_dm_invitation(message: str, on_accept: Callable[[str], None]):\n    \"\"\"Traite un message d'invitation DM et appelle on_accept avec le nom du salon si accepté.\"\"\"\n    if not is_dm_invitation(message):",
        "detail": "protocols.dm_protocol",
        "documentation": {}
    },
    {
        "label": "handle_dm_invitation",
        "kind": 2,
        "importPath": "protocols.dm_protocol",
        "description": "protocols.dm_protocol",
        "peekOfCode": "def handle_dm_invitation(message: str, on_accept: Callable[[str], None]):\n    \"\"\"Traite un message d'invitation DM et appelle on_accept avec le nom du salon si accepté.\"\"\"\n    if not is_dm_invitation(message):\n        return\n    salon = extract_dm_channel_name(message)\n    if not salon:\n        return\n    from tkinter import messagebox\n    if messagebox.askyesno(\"Invitation\", f\"Rejoindre le salon privé '{salon}' ?\"):\n        on_accept(salon)",
        "detail": "protocols.dm_protocol",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "user.user",
        "description": "user.user",
        "peekOfCode": "class User:\n    def __init__(self, pseudo, broker_address=getBrokerAddress(), port=getBrokerPort()):\n        self.id = createUserId()\n        self.pseudo = pseudo  # reçu depuis l'interface GUI\n        # Identifiant DM : pseudo + 5 caractères aléatoires\n        suffix = ''.join(random.choices(string.ascii_letters+string.digits, k=5))\n        self.user_id = f\"{pseudo}{suffix}\"\n        self.client = mqtt.Client(client_id=self.id)\n        self.client.connect(broker_address, port)\n        self.client.loop_start()",
        "detail": "user.user",
        "documentation": {}
    },
    {
        "label": "createUserId",
        "kind": 2,
        "importPath": "user.user",
        "description": "user.user",
        "peekOfCode": "def createUserId():\n    randomstring = ''.join(random.choice(string.ascii_letters) for _ in range(15))\n    timestamp = datetime.datetime.now().isoformat()\n    to_hash = f\"{timestamp}{randomstring}\".encode('utf-8')\n    return hashlib.sha1(to_hash).hexdigest()\ndef createUserPseudo():\n    return input(\"Veuillez renseigner votre pseudo : \")\nclass User:\n    def __init__(self, pseudo, broker_address=getBrokerAddress(), port=getBrokerPort()):\n        self.id = createUserId()",
        "detail": "user.user",
        "documentation": {}
    },
    {
        "label": "createUserPseudo",
        "kind": 2,
        "importPath": "user.user",
        "description": "user.user",
        "peekOfCode": "def createUserPseudo():\n    return input(\"Veuillez renseigner votre pseudo : \")\nclass User:\n    def __init__(self, pseudo, broker_address=getBrokerAddress(), port=getBrokerPort()):\n        self.id = createUserId()\n        self.pseudo = pseudo  # reçu depuis l'interface GUI\n        # Identifiant DM : pseudo + 5 caractères aléatoires\n        suffix = ''.join(random.choices(string.ascii_letters+string.digits, k=5))\n        self.user_id = f\"{pseudo}{suffix}\"\n        self.client = mqtt.Client(client_id=self.id)",
        "detail": "user.user",
        "documentation": {}
    },
    {
        "label": "getBrokerAddress",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def getBrokerAddress():\n    return \"broker.hivemq.com\"\ndef getBrokerPort():\n    return 1883",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "getBrokerPort",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def getBrokerPort():\n    return 1883",
        "detail": "utils.utils",
        "documentation": {}
    }
]